[
  {
    "title": "Using framer-motion with Next.js",
    "date": "2022-10-28T00:00:00.000Z",
    "excerpt": "A few months ago, I decided to rebuild my site from scratch, while building it, I decided that it would improve the user experience to add animations to the page transitions and the elements within it. In this post, I'll talk about my experience using framer-motion.",
    "slug": "framer-motion",
    "body": {
      "raw": "\n# Framer Motion\n\n> A production-ready motion library for React.\n>\n> ***https://www.framer.com/motion***\n\nIt's a library that enables the animations of React components on a page and while the component is entering and also leaving.\n\nFramer Motion can do all of the following:\n\n- Spring animations\n- Simple keyframes syntax\n- Gestures (drag/tap/hover)\n- Layout and shared layout animations\n- SVG paths\n- Exit animations\n- Server-side rendering\n- Variants for orchestrating animations across components\n- CSS variables\n\nRead more about Framer Motion and view examples on [**their website**](https://www.framer.com/motion/).\n\n# Animating Next.js page transitions\n\nAs well as making user-triggered animations, Framer Motion can animate a component when it is mounting (entering) and unmounting (leaving). I use this capability to animate the components that come and go when the page changes. In Next.js terms, this is everything apart from \\_app.js - so all pages and other components. Where possible, using `app.js` to persist layouts between page changes will reduce the amount of rendering that React has to do each time the page changes - potentially improving your app performance.\nPreparing the codebase\n\nBefore I added any animations to my website I did two pieces of refactoring:\n\n1. Moved common components that shouldn't animate on every page change into \\_app.js. In my case, this meant moving the Header and Footer which you can see on GitHub.\n2. Added a wrapper component to control the animation states within pages. On my website, it is the Layout component. Note the <motion.main> component which is specific to Framer Motion. In the rendered HTML output this will be an HTML main element, however, adding the motion. supplied by Framer Motion provides the ability to pass certain animation props such as transition, initial and animate.\n\n```js\nconsole.log('this is a test')\n```\n\nEntry animations\n\nLooking at the Layout component you will see an object named variants (see below). Variants promote cleaner code by removing the requirement to add the animation object to the motion.main component. You can read more about them on the Framer Motion website.\n",
      "html": "<h1>Framer Motion</h1>\n<blockquote>\n<p>A production-ready motion library for React.</p>\n<p><em><strong><a href=\"https://www.framer.com/motion\">https://www.framer.com/motion</a></strong></em></p>\n</blockquote>\n<p>It's a library that enables the animations of React components on a page and while the component is entering and also leaving.</p>\n<p>Framer Motion can do all of the following:</p>\n<ul>\n<li>Spring animations</li>\n<li>Simple keyframes syntax</li>\n<li>Gestures (drag/tap/hover)</li>\n<li>Layout and shared layout animations</li>\n<li>SVG paths</li>\n<li>Exit animations</li>\n<li>Server-side rendering</li>\n<li>Variants for orchestrating animations across components</li>\n<li>CSS variables</li>\n</ul>\n<p>Read more about Framer Motion and view examples on <a href=\"https://www.framer.com/motion/\"><strong>their website</strong></a>.</p>\n<h1>Animating Next.js page transitions</h1>\n<p>As well as making user-triggered animations, Framer Motion can animate a component when it is mounting (entering) and unmounting (leaving). I use this capability to animate the components that come and go when the page changes. In Next.js terms, this is everything apart from _app.js - so all pages and other components. Where possible, using <code>app.js</code> to persist layouts between page changes will reduce the amount of rendering that React has to do each time the page changes - potentially improving your app performance.\nPreparing the codebase</p>\n<p>Before I added any animations to my website I did two pieces of refactoring:</p>\n<ol>\n<li>Moved common components that shouldn't animate on every page change into _app.js. In my case, this meant moving the Header and Footer which you can see on GitHub.</li>\n<li>Added a wrapper component to control the animation states within pages. On my website, it is the Layout component. Note the &#x3C;motion.main> component which is specific to Framer Motion. In the rendered HTML output this will be an HTML main element, however, adding the motion. supplied by Framer Motion provides the ability to pass certain animation props such as transition, initial and animate.</li>\n</ol>\n<div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"js\" data-theme=\"default\"><code data-language=\"js\" data-theme=\"default\"><span class=\"line\"><span style=\"color: #E5C07B\">console</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">log</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">'this is a test'</span><span style=\"color: #ABB2BF\">)</span></span></code></pre></div>\n<p>Entry animations</p>\n<p>Looking at the Layout component you will see an object named variants (see below). Variants promote cleaner code by removing the requirement to add the animation object to the motion.main component. You can read more about them on the Framer Motion website.</p>"
    },
    "_id": "next-with-framer-motion.md",
    "_raw": {
      "sourceFilePath": "next-with-framer-motion.md",
      "sourceFileName": "next-with-framer-motion.md",
      "sourceFileDir": ".",
      "contentType": "markdown",
      "flattenedPath": "next-with-framer-motion"
    },
    "type": "Post",
    "url": "/posts/next-with-framer-motion"
  },
  {
    "title": "Uses",
    "date": "2023-03-28T00:00:00.000Z",
    "excerpt": "Software and hardware I use for personal and proffesional projects",
    "slug": "uses",
    "body": {
      "raw": "\n# Uses\n\nThis is a list of the equipment I use as part of my day-to-day work as a software engineer.\n\n## Computer & Hardware\n\n- [Macbook Pro 16](https://www.apple.com/shop/buy-mac/macbook-pro/16-inch): So far it has been a breeze working on this machine, can deal with pretty much everything you throw at it.\n- Apple Magic Keyboard\n- Apple Magic Trackpad\n\n## Development Tools\n\n- [Visual Studio Code](https://code.visualstudio.com/): My editor of choice, it's a very lightweight but pretty extensible piece of software. One of the selling points for me is how customizable it is (if you want to see my settings you can find them [here](https://gist.github.com/azuri-gm/246bca4680c893bdee27ce948f686783)).\n- [Github Copilot](https://github.com/features/copilot): Using [OpenAI Codex](https://openai.com/blog/openai-codex) to help you code everyday, what more can I say?.\n- Git\n- Postman\n\n## Productivity Tools\n\n- Notion\n- Jira\n",
      "html": "<h1>Uses</h1>\n<p>This is a list of the equipment I use as part of my day-to-day work as a software engineer.</p>\n<h2>Computer &#x26; Hardware</h2>\n<ul>\n<li><a href=\"https://www.apple.com/shop/buy-mac/macbook-pro/16-inch\">Macbook Pro 16</a>: So far it has been a breeze working on this machine, can deal with pretty much everything you throw at it.</li>\n<li>Apple Magic Keyboard</li>\n<li>Apple Magic Trackpad</li>\n</ul>\n<h2>Development Tools</h2>\n<ul>\n<li><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>: My editor of choice, it's a very lightweight but pretty extensible piece of software. One of the selling points for me is how customizable it is (if you want to see my settings you can find them <a href=\"https://gist.github.com/azuri-gm/246bca4680c893bdee27ce948f686783\">here</a>).</li>\n<li><a href=\"https://github.com/features/copilot\">Github Copilot</a>: Using <a href=\"https://openai.com/blog/openai-codex\">OpenAI Codex</a> to help you code everyday, what more can I say?.</li>\n<li>Git</li>\n<li>Postman</li>\n</ul>\n<h2>Productivity Tools</h2>\n<ul>\n<li>Notion</li>\n<li>Jira</li>\n</ul>"
    },
    "_id": "uses.md",
    "_raw": {
      "sourceFilePath": "uses.md",
      "sourceFileName": "uses.md",
      "sourceFileDir": ".",
      "contentType": "markdown",
      "flattenedPath": "uses"
    },
    "type": "Post",
    "url": "/posts/uses"
  },
  {
    "title": "My top 5 used VS Code extensions",
    "date": "2022-12-24T00:00:00.000Z",
    "excerpt": "In this post I'll share my top 5 VSCode extensions that help me stay productive while working daily. From automating tasks to formatting your code, this extensions will help you stay on top of your game!.",
    "slug": "top-5-vscode-extensions",
    "body": {
      "raw": "\nVisual Studio Code (which is maintained by Microsoft), is one of the most **popular open source** code editors currently out there. Perhaps one of the reasons for this is the extensive ecosystem of extensions that currently exist. And while some IDEs may have the functionality that these extensions provide, the customization potential alone make it a very attractive offering for all the text editor user's.\n\nIn this brief guide, we'll go over the top 5 extensions I believe all web developers can benefit from. I'll go over what they do and how they can make your coding journey all the merrier. Let's jump right in!\n\n- [Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)\n- [GitLens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens)\n- [Path Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense)\n- [Import Cost](https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost)\n- [Quokka.js](https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode 'Quokka JS marketplace')\n\n## Prettier\n\nIf you haven't heard about it [Prettier](https://prettier.io/) is an opinionated code formatter that supports most commonly used programming languages; This allows teams to standarize code styles and save time/energy for the developers.\n\nThis extension will help you get used to setting it up and enable you things like automatically fixing formatting issues in your code, fixing the mix of single and double-quotes or an irregular use of semicolons.\n\n> Some of the supported technologies: JavaScript, TypeScript, Java, JSON, CSS, HTML, Vue, Angular, Markdown, YAML, and more.\n\n## GitLens\n\nThis extension combines the capabilities of Git and empowers them within the text editor, It allows you to learn who, why, and even when code was changed within the repository. All of this while also showing you the evolution of the codebase within the explore view\n\nIt also has other features such as:\n\n- History revision navigation.\n- Git Blame.\n- Status Bar with further information about the current Git history.\n\n## Path Intellisense\n\nThis is a very simple, yet very powerful extension. Basicall what it does, is autocomplete the path to whatevery file you're typing. _**pretty cool, huh?**_\n\n## Import Cost\n\nThis extension shows the estimated size of an import package, this in my opinion is a very powerful tool because it helps in keeping track of the size of all added dependencies. If it's too large it'll show a nice big warning in red color so you won't miss it.\n\n## Quokka.js\n\nThis extension allows you to quickly prototype code in a playground within VS Code, and while this extension has a paid version, the free one is plenty enough showing you:\n\n- Inline reporting.\n- The result of the code execution within the same line.\n- Runtime values and rich output formatting.\n\nAs you can see, we're barely scratching the surface of what customizing VS Code can look like. This flexibility is great, since it permits you to match your editor to your current needs\n",
      "html": "<p>Visual Studio Code (which is maintained by Microsoft), is one of the most <strong>popular open source</strong> code editors currently out there. Perhaps one of the reasons for this is the extensive ecosystem of extensions that currently exist. And while some IDEs may have the functionality that these extensions provide, the customization potential alone make it a very attractive offering for all the text editor user's.</p>\n<p>In this brief guide, we'll go over the top 5 extensions I believe all web developers can benefit from. I'll go over what they do and how they can make your coding journey all the merrier. Let's jump right in!</p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">Prettier</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens\">GitLens</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense\">Path Intellisense</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost\">Import Cost</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode\" title=\"Quokka JS marketplace\">Quokka.js</a></li>\n</ul>\n<h2>Prettier</h2>\n<p>If you haven't heard about it <a href=\"https://prettier.io/\">Prettier</a> is an opinionated code formatter that supports most commonly used programming languages; This allows teams to standarize code styles and save time/energy for the developers.</p>\n<p>This extension will help you get used to setting it up and enable you things like automatically fixing formatting issues in your code, fixing the mix of single and double-quotes or an irregular use of semicolons.</p>\n<blockquote>\n<p>Some of the supported technologies: JavaScript, TypeScript, Java, JSON, CSS, HTML, Vue, Angular, Markdown, YAML, and more.</p>\n</blockquote>\n<h2>GitLens</h2>\n<p>This extension combines the capabilities of Git and empowers them within the text editor, It allows you to learn who, why, and even when code was changed within the repository. All of this while also showing you the evolution of the codebase within the explore view</p>\n<p>It also has other features such as:</p>\n<ul>\n<li>History revision navigation.</li>\n<li>Git Blame.</li>\n<li>Status Bar with further information about the current Git history.</li>\n</ul>\n<h2>Path Intellisense</h2>\n<p>This is a very simple, yet very powerful extension. Basicall what it does, is autocomplete the path to whatevery file you're typing. <em><strong>pretty cool, huh?</strong></em></p>\n<h2>Import Cost</h2>\n<p>This extension shows the estimated size of an import package, this in my opinion is a very powerful tool because it helps in keeping track of the size of all added dependencies. If it's too large it'll show a nice big warning in red color so you won't miss it.</p>\n<h2>Quokka.js</h2>\n<p>This extension allows you to quickly prototype code in a playground within VS Code, and while this extension has a paid version, the free one is plenty enough showing you:</p>\n<ul>\n<li>Inline reporting.</li>\n<li>The result of the code execution within the same line.</li>\n<li>Runtime values and rich output formatting.</li>\n</ul>\n<p>As you can see, we're barely scratching the surface of what customizing VS Code can look like. This flexibility is great, since it permits you to match your editor to your current needs</p>"
    },
    "_id": "vscode-extensions.md",
    "_raw": {
      "sourceFilePath": "vscode-extensions.md",
      "sourceFileName": "vscode-extensions.md",
      "sourceFileDir": ".",
      "contentType": "markdown",
      "flattenedPath": "vscode-extensions"
    },
    "type": "Post",
    "url": "/posts/vscode-extensions"
  },
  {
    "title": "Migrating to Next.js 13",
    "date": "2023-04-02T00:00:00.000Z",
    "excerpt": "With the release of Next.js 13, there are several changes and improvements that developers should be aware of. In this guide, we'll discuss the steps involved in migrating to Next.js 13.",
    "slug": "migrating-to-next13",
    "body": {
      "raw": "\n# Migrating to Next.js 13\n\nNext.js is a popular React-based framework for building server-rendered applications. With the release of Next.js 13, there are several changes and improvements that developers should be aware of. In this guide, we'll discuss the steps involved in migrating to Next.js 13.\n\n## Step 1: Upgrade to the latest version of Next.js\n\nThe first step is to upgrade your existing Next.js application to the latest version, which is Next.js 13 at the time of writing. You can do this by running the following command in your terminal:\n\n```bash\nnpm install next@latest\n```\n\nOnce the installation is complete, you can check the version of Next.js by running the following command:\n\n```bash\nnpx next --version\n```\n\n## Step 2: Update dependencies\n\nNext.js 13 comes with a number of updated dependencies, including React 18 and webpack 5. It's important to make sure that all your dependencies are compatible with these new versions.\n\nYou can update your dependencies by running the following command:\n\n```bash\nnpm install\n```\n\nThis will update all the dependencies in your package.json file to the latest versions.\n\n## Step 3: Update configuration files\n\nNext.js 13 introduces some changes to the configuration files. You may need to update your next.config.js file to make sure it's compatible with the new version of Next.js.\n\nOne important change is the removal of the basePath property. If you were using this property in your configuration, you'll need to remove it and update your application code accordingly.\n\n## Step 4: Update your code\n\nNext.js 13 introduces some changes to the way images are handled in the application. The next/image component now uses a new srcSet attribute instead of the old sizes attribute.\n\nYou'll need to update any instances of the sizes attribute to use srcSet instead.\n\n## Step 5: Test your application\n\nOnce you've completed the above steps, it's important to thoroughly test your application to make sure everything is working as expected.\n\nMake sure to check all the pages and components in your application and verify that they're rendering correctly.\n\n## Conclusion\n\nMigrating to Next.js 13 may seem like a daunting task, but by following the steps outlined in this guide, you can make the process much smoother.\n\nBy upgrading to the latest version of Next.js, updating your dependencies and configuration files, and updating your code to use the new image handling attributes, you can ensure that your application is compatible with the latest version of Next.js and taking advantage of all its new features and improvements.\n",
      "html": "<h1>Migrating to Next.js 13</h1>\n<p>Next.js is a popular React-based framework for building server-rendered applications. With the release of Next.js 13, there are several changes and improvements that developers should be aware of. In this guide, we'll discuss the steps involved in migrating to Next.js 13.</p>\n<h2>Step 1: Upgrade to the latest version of Next.js</h2>\n<p>The first step is to upgrade your existing Next.js application to the latest version, which is Next.js 13 at the time of writing. You can do this by running the following command in your terminal:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"bash\" data-theme=\"default\"><code data-language=\"bash\" data-theme=\"default\"><span class=\"line\"><span style=\"color: #ABB2BF\">npm </span><span style=\"color: #98C379\">install</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">next@latest</span></span></code></pre></div>\n<p>Once the installation is complete, you can check the version of Next.js by running the following command:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"bash\" data-theme=\"default\"><code data-language=\"bash\" data-theme=\"default\"><span class=\"line\"><span style=\"color: #ABB2BF\">npx </span><span style=\"color: #98C379\">next</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">--version</span></span></code></pre></div>\n<h2>Step 2: Update dependencies</h2>\n<p>Next.js 13 comes with a number of updated dependencies, including React 18 and webpack 5. It's important to make sure that all your dependencies are compatible with these new versions.</p>\n<p>You can update your dependencies by running the following command:</p>\n<div data-rehype-pretty-code-fragment=\"\"><pre data-language=\"bash\" data-theme=\"default\"><code data-language=\"bash\" data-theme=\"default\"><span class=\"line\"><span style=\"color: #ABB2BF\">npm </span><span style=\"color: #98C379\">install</span></span></code></pre></div>\n<p>This will update all the dependencies in your package.json file to the latest versions.</p>\n<h2>Step 3: Update configuration files</h2>\n<p>Next.js 13 introduces some changes to the configuration files. You may need to update your next.config.js file to make sure it's compatible with the new version of Next.js.</p>\n<p>One important change is the removal of the basePath property. If you were using this property in your configuration, you'll need to remove it and update your application code accordingly.</p>\n<h2>Step 4: Update your code</h2>\n<p>Next.js 13 introduces some changes to the way images are handled in the application. The next/image component now uses a new srcSet attribute instead of the old sizes attribute.</p>\n<p>You'll need to update any instances of the sizes attribute to use srcSet instead.</p>\n<h2>Step 5: Test your application</h2>\n<p>Once you've completed the above steps, it's important to thoroughly test your application to make sure everything is working as expected.</p>\n<p>Make sure to check all the pages and components in your application and verify that they're rendering correctly.</p>\n<h2>Conclusion</h2>\n<p>Migrating to Next.js 13 may seem like a daunting task, but by following the steps outlined in this guide, you can make the process much smoother.</p>\n<p>By upgrading to the latest version of Next.js, updating your dependencies and configuration files, and updating your code to use the new image handling attributes, you can ensure that your application is compatible with the latest version of Next.js and taking advantage of all its new features and improvements.</p>"
    },
    "_id": "migrating-to-next13.md",
    "_raw": {
      "sourceFilePath": "migrating-to-next13.md",
      "sourceFileName": "migrating-to-next13.md",
      "sourceFileDir": ".",
      "contentType": "markdown",
      "flattenedPath": "migrating-to-next13"
    },
    "type": "Post",
    "url": "/posts/migrating-to-next13"
  }
]